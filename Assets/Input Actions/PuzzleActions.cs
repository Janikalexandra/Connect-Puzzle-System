//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/PuzzleActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PuzzleActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PuzzleActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PuzzleActions"",
    ""maps"": [
        {
            ""name"": ""Connect Puzzle"",
            ""id"": ""5cfbf0bb-30ee-4b20-b877-7a5881097db3"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""8fecf9d6-75dc-421f-a5a8-5cfb96215d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPos"",
                    ""type"": ""Value"",
                    ""id"": ""14b8cde0-9814-4aa7-ba06-ef5f44bbd596"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d69bc08-85c7-45ab-869b-434eb503f0b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58d7a4cf-84e2-4b4e-a8fe-d704dc46d6d9"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12a05f5a-675c-4c8e-ba8a-8b78f4e26ef7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d92090c2-f101-482b-8f06-e2e8ff5332a8"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Connect Puzzle
        m_ConnectPuzzle = asset.FindActionMap("Connect Puzzle", throwIfNotFound: true);
        m_ConnectPuzzle_Press = m_ConnectPuzzle.FindAction("Press", throwIfNotFound: true);
        m_ConnectPuzzle_ScreenPos = m_ConnectPuzzle.FindAction("ScreenPos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Connect Puzzle
    private readonly InputActionMap m_ConnectPuzzle;
    private List<IConnectPuzzleActions> m_ConnectPuzzleActionsCallbackInterfaces = new List<IConnectPuzzleActions>();
    private readonly InputAction m_ConnectPuzzle_Press;
    private readonly InputAction m_ConnectPuzzle_ScreenPos;
    public struct ConnectPuzzleActions
    {
        private @PuzzleActions m_Wrapper;
        public ConnectPuzzleActions(@PuzzleActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_ConnectPuzzle_Press;
        public InputAction @ScreenPos => m_Wrapper.m_ConnectPuzzle_ScreenPos;
        public InputActionMap Get() { return m_Wrapper.m_ConnectPuzzle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConnectPuzzleActions set) { return set.Get(); }
        public void AddCallbacks(IConnectPuzzleActions instance)
        {
            if (instance == null || m_Wrapper.m_ConnectPuzzleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConnectPuzzleActionsCallbackInterfaces.Add(instance);
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @ScreenPos.started += instance.OnScreenPos;
            @ScreenPos.performed += instance.OnScreenPos;
            @ScreenPos.canceled += instance.OnScreenPos;
        }

        private void UnregisterCallbacks(IConnectPuzzleActions instance)
        {
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @ScreenPos.started -= instance.OnScreenPos;
            @ScreenPos.performed -= instance.OnScreenPos;
            @ScreenPos.canceled -= instance.OnScreenPos;
        }

        public void RemoveCallbacks(IConnectPuzzleActions instance)
        {
            if (m_Wrapper.m_ConnectPuzzleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConnectPuzzleActions instance)
        {
            foreach (var item in m_Wrapper.m_ConnectPuzzleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConnectPuzzleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConnectPuzzleActions @ConnectPuzzle => new ConnectPuzzleActions(this);
    public interface IConnectPuzzleActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnScreenPos(InputAction.CallbackContext context);
    }
}
